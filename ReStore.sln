
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.30114.105
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "API", "API\API.csproj", "{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|x64.ActiveCfg = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|x64.Build.0 = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|x86.ActiveCfg = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Debug|x86.Build.0 = Debug|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|Any CPU.Build.0 = Release|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|x64.ActiveCfg = Release|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|x64.Build.0 = Release|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|x86.ActiveCfg = Release|Any CPU
		{4E0C531A-5CB1-48C5-9C13-0EAFF815DE95}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal

----
layout
----
import  * as React from 'react';
import MenuList from '../../components/Menu/Atoms/MenuList';
import  { useState } from 'react';
import { styled, useTheme, Theme, CSSObject } from '@mui/material/styles';
import Box from '@mui/material/Box';
import MuiDrawer from '@mui/material/Drawer';
import CssBaseline from '@mui/material/CssBaseline';
import MuiAppbar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Divider from '@mui/material/Divider';
import IconButton from '@mui/material/IconButton';
import clsx from 'clsx';

// アイコン関連
import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import MenuItems from '../../components/Menu/CallCenter';

const backgroundColor = "##FFFFFF";

interface ComponentProps {
  mainComponent:JSX.Element,
  title:string,
};

const drawerWidth = 240;

// #region メニューのオープン／クローズ設定
const openedMixin = (theme: Theme): CSSObject => ({
    width: drawerWidth,
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.enteringScreen,
    }),
    overflowX: 'hidden',
});

const closedMixin = (theme: Theme): CSSObject => ({
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: `calc(${theme.spacing(7)} + 1px )`,
    [theme.breakpoints.up('sm')]: {
        width: `calc(${theme.spacing(8)} * 1px )`,
    },
});

interface AppBarProps extends MuiAppBarProps {
    open?: boolean;
};

const AppBar = styled(MuiAppbar, {
    shouldForwardProp: (prop) => prop !== 'open',
})<AppBarProps>(({ theme, open }) => ({
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    ...open && {
        marginLeft: drawerWidth,
        width: `calc(100% - ${drawerWidth}px)`,
        transition: theme.transitions.create(['width', 'margin'], {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.enteringScreen,
        }),
    },
}));

const DrawerHeader = styled('div')(({theme}) => ({
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: theme.spacing(0,1),
    ...theme.mixins.toolbar,
}));

const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open'}) (
    ({ theme, open }) => ({
        width: drawerWidth,
        flexShrink: 0,
        whiteSpace: 'nowrap',
        boxSizing: 'border-box',
        ...(open && {
            ...openedMixin(theme),
            '& .MuiDrawer-paper': openedMixin(theme),
        }),
        ...(!open && {
            ...closedMixin(theme),
            '& .MuiDrawer-paper': closedMixin(theme),
        }),
    }),  
);
// #endregion


export interface MenuItem {
    id: number;
    url: string;
    icon: JSX.Element;
    text: string;
};

export interface MenuProps {
    items: MenuItem[]
};

const StyleForm = styled('form')(({theme}) => ({
    paddingTop:theme.spacing(0),
    backgroundColor:backgroundColor,
  }));
  
  const StyleContent = styled("div")({
    width:'100%',
    overflowX: 'hidden',
  });
  

export const Index = (mainComponentProps:ComponentProps) => {
    // サイドメニューの開閉状態
    const theme = useTheme();
    const [open, setOpen] = useState(true);
    const{ mainComponent,title } = mainComponentProps;

    // オープンクリック
    const handleDrawerOpen = () => {
        setOpen(true);
    };

    // クローズクリック
    const handleDrawerClose = () => {
        setOpen(false);
    };

    return (
      <React.Fragment>
            <Box
                sx = {{ display: 'flex' }}
            >
                <CssBaseline />
                <AppBar
                    position = 'fixed'
                    open={open}
                >
                    <Toolbar>
                        <IconButton
                            edge="start"
                            color='inherit'
                            onClick = {handleDrawerOpen}
                            sx = {{
                                mr: 2,
                                ...(open && { display: 'none'}),
                            }}
                        >
                            <MenuIcon/>
                        </IconButton>
                    </Toolbar>
                </AppBar>
                <Drawer
                    variant = "permanent"
                    open={open}
                    sx = {{
                        '& .MuiDrawer-paper' : {
                            backgroundColor: '#FFFFCC',
                            boxSizing: 'border-box',
                        },
                    }}
                >
                    <DrawerHeader>
                        <IconButton
                            onClick = {handleDrawerClose}
                            sx = {{
                                color: '#000000',
                            }}
                        >
                            {<ChevronLeftIcon/>}
                        </IconButton>
                    </DrawerHeader>
                    
                    {MenuItems().map((menu) => {
                        return (
                            <MenuList key={menu.id} url={menu.url} icon={menu.icon} text={menu.text} color='#87CEFA'/>
                        )
                    })}

                    <Divider />
                </Drawer>
                <Box component='main' sx ={{flexGrow: 1, p: 3}}>
                    <StyleForm>
                        <main className={clsx(StyleContent)}>
                            {mainComponent}
                        </main>
                    </StyleForm>
                </Box>
            </Box>
        </React.Fragment>
    );
};

export default Index;
------- tellinput
-----

import React from 'react';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Checkbox from '@mui/material/Checkbox';
import { styled } from '@mui/system';
import { DataGrid, GridColDef } from '@mui/x-data-grid';

// スタイル定義
const Styledtitleheader = styled("div")({
    fontSize: 24,
});

export function ControlledCheckbox() {
    const [checked, setChecked] = React.useState(true);
  
    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      setChecked(event.target.checked);
    };
  
    return (
      <Checkbox
        onChange={handleChange}
        inputProps={{ 'aria-label': 'controlled' }}
      />
    );
}

// グリッド関連
const columns: GridColDef[] = [
    {
        field: 'chkDelKbn',
        headerName: '削除',
        sortable: false,
        type:'string',
        headerAlign: 'center',
        align: 'center',
        flex: 0.15,
        renderCell: (params) => <ControlledCheckbox />
    },
    { field: 'ROW_NUM', headerName: 'No.', type:'number', headerAlign: 'center', align: 'center', flex: 0.1},
    { field: 'TOKSEQ', headerName: 'コール日時', type:'date', headerAlign: 'center', align: 'center', flex: 0.7, hide: true},
    { field: 'TELKBN', headerName: '', type:'string' , headerAlign: 'center', align: 'left', flex: 0.4 },
    { field: 'TELNO', headerName: '電話番号', type:'string', headerAlign: 'center', flex: 0.4, editable: true },
    {
        field: 'chkCallKbn',
        headerName: 'TEL不可',
        sortable: false,
        type:'string',
        headerAlign: 'center',
        align: 'center',
        flex: 0.3,
        renderCell: (params) => <ControlledCheckbox />
    },
    { field: 'CALLKBN', headerName: 'コール分類', type:'string', headerAlign: 'center', flex: 1.0, hide: true },
    { field: 'BIKO', headerName: '備考', type:'string', headerAlign: 'center', flex: 1.7 , editable: true},
    { field: 'NOTE', headerName: '', type:'string', headerAlign: 'center',align: 'center', flex: 0.7, hide: true },
    { field: 'TELKBNCD', headerName: '', type:'string', headerAlign: 'center',align: 'center', flex: 0.7, hide: true },
    { field: 'OLDTELNO', headerName: '', type:'string', headerAlign: 'center',align: 'center', flex: 0.7, hide: true },
];

const styles = {
    grid: {
      '.MuiDataGrid-toolbarContainer': {
        borderBottom: 'solid 1px rgba(224, 224, 224, 1)'  
      },
       // 列ヘッダに背景色を指定
      '.MuiDataGrid-columnHeaders': {
        backgroundColor: '#40b4c8', 
        color: '#fff',
        fontSize: '1.2rem'
      },
      '.MuiDataGrid-row': {
        fontSize: '1.1rem'
      },
       //　ヘッダ選択時のフォーカス枠の切れを修正
      '.MuiDataGrid-columnHeader:focus-within': {
        outlineOffset: -3
      },
      height:500,
      overflowX: 'auto',
    },
};

const rows = [
    { ROW_NUM: 1, TOKSEQ: '00001', TELKBN: '電話番号', TELNO: '092123456', CALLKBN: '01', BIKO: 'テスト備考', NOTE: 'テストノート', TELKBNCD: 'テスト', OLDTELNO: '092123456'},
    { ROW_NUM: 2, TOKSEQ: '00002', TELKBN: '第２電話', TELNO: '092123456', CALLKBN: '01', BIKO: 'テスト備考', NOTE: 'テストノート', TELKBNCD: 'テスト', OLDTELNO: '092123456'},
    { ROW_NUM: 3, TOKSEQ: '00003', TELKBN: '勤務先', TELNO: '092123456', CALLKBN: '01', BIKO: 'テスト備考', NOTE: 'テストノート', TELKBNCD: 'テスト', OLDTELNO: '092123456'},
];

export default function CallReserveChange() {

    const [datarows, setRows] = React.useState(rows);

    // ******************
    // 行追加ボタン押下時
    // ******************
    const handleAddrow = () => {

        alert('行追加ボタン押下時処理');
        // TOOD チェックボックス列の実装が問題？
        const id = (datarows.length == 0)? 1 : Math.max(...datarows.map(v => v.ROW_NUM)) + 1; /* 配列内のオブジェクトidの最大値を求めて+1 */
        const newValue = { ROW_NUM: id, TOKSEQ: '', TELKBN: '', TELNO: '111111', CALLKBN: '', BIKO: '', NOTE: '', TELKBNCD: '', OLDTELNO: ''};
        setRows([...datarows,newValue]);
    };

    // ******************
    // 更新ボタン押下時
    // ******************
    const handleUpdate = () => {
        alert('更新ボタン押下時処理');
    };

    // ******************
    // 閉じるボタン押下時
    // ******************
    const handleClose = () => {
        alert('閉じるボタン押下時処理');
    };

    return (
        <React.Fragment>
            <Box sx={{ bgcolor: 'info.main', color: 'background.paper', p: 2 ,textAlign: 'center', maxWidth:"100%", justifyContent:"space-between"}}>
                <Styledtitleheader>
                    複数電話登録
                </Styledtitleheader>
            </Box>
            <DataGrid getRowId={(row) => row.ROW_NUM}
                sx={styles.grid}
                rows={rows}
                columns={columns}
            />
            <Box
                sx={{
                    p: 1,
                    m: 1,
                    textAlign: 'right',     // 右寄せ
                }}
            >
                <Button variant="contained"
                    onClick = {handleAddrow}
                    sx={{
                        width: '10%',
                        height: 50,
                    }}>
                        行追加
                </Button>
                　
                <Button variant="contained"
                    onClick = {handleUpdate}
                    sx={{
                        width: '10%',
                        height: 50,
                    }}>
                        更新
                </Button>
                　
                <Button variant="contained"
                        onClick = {handleClose}
                        sx={{
                            width: '10%',
                            height: 50,
                        }}>
                            閉じる
                    </Button>
            </Box>
        </React.Fragment>     
    );
};

--------
style\\\\
----header style
-----
import { styled } from '@mui/material/styles';

// ヘッダ部エリアのスタイル設定
//  （検索条件のエリア）
export const StyledHeader = styled("div")(({theme}) => ({
    padding:0,
    paddingLeft: theme.spacing(2),
    paddingTop: '10px',
    fontSize: 24,
  }));

// 一覧画面用ヘッダタイトルのスタイル設定
export const StyledTitleHeader = styled("div")({
  fontSize: 20,
});

// 入力項目のサンプル表記のスタイル設定
export const StyledExample = styled('text')({
  color:'blue',
});

export const StyledDataGrid = {
  grid: {
    '.MuiDataGrid-toolbarContainer': {
      borderBottom: 'solid 1px rgba(224, 224, 224, 1)'  
    },
     // 列ヘッダに背景色を指定
    '.MuiDataGrid-columnHeaders': {
      backgroundColor: '#40b4c8', 
      color: '#fff',
      fontSize: '1.2rem'
    },
    '.MuiDataGrid-row': {
      fontSize: '1.1rem'
    },
     //　ヘッダ選択時のフォーカス枠の切れを修正
    '.MuiDataGrid-columnHeader:focus-within': {
      outlineOffset: -3,
      outline: 'none'
    },
    //　データ選択時のフォーカス枠の切れを修正
    '.MuiDataGrid-cell:focus': {
      outline: 'none'
    },
    height:592,
    overflowX: 'auto',
  },
};
--------
them
---
import { createTheme, ThemeProvider } from "@mui/material/styles";

export const SiteTheme = createTheme({
  components: {
    //　コンポーネント名
    MuiFormControl: {
      styleOverrides: {
        // CSSルール名
        root: {
          margin: "4px"
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          padding:"8px",
          lineHeight:1
        }
      }
    }
  }
});
